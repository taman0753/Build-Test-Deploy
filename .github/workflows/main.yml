name: Build-Test-Deploy

on:
  repository_dispatch:
  workflow_dispatch:
  push:
    branches: 
      - master
  schedule:
    - cron: '0 7 * * *'
    - cron: '0 21 * * *'
jobs:
 Build-job:
    runs-on: ubuntu-latest
    name: Making builds
    steps:
      - uses: actions/checkout@v1
      - name: Make build
        uses: jzweifel/gatsby-cli-github-action@master
        with:
            gatsby-arg: build

      - name: Uploading artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: artifact/index.html
 
 Jira-issue-create:
    name: Transition Issue Create
    needs: Build-job
    runs-on: ubuntu-latest
    steps:
    - name: Login
      uses: atlassian/gajira-login@master
      env:
        JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
        JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
        JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
        
    - name: Create new issue
      id: create
      uses: atlassian/gajira-create@master
      with:
        project: DFGA
        issuetype: Task
        summary: |
              Testing will start for ${{ github.repository }}:

    - name: Transition issue
      uses: atlassian/gajira-transition@master
      with:
        issue: ${{ steps.create.outputs.issue }}
        transition: "In progress"
 
 Test-job1:
    runs-on: ubuntu-latest
    needs: [Build-job]
    if: github.ref != 'refs/heads/production' 
    name: Test1
    steps:
      - uses: actions/checkout@v1
      - name: Test1
        uses: actions/setup-node@v1
        with:
          node-version: 14
      - run: npm install --global mocha
      - run: npm test 
 Test-job2:
    runs-on: ubuntu-latest
    needs: Build-job 
    if: github.ref != 'refs/heads/production' 
    name: Test2
    steps:
      - uses: actions/checkout@v1
      - name: Test2
        uses: actions/setup-node@v1
        with:
          node-version: 14
      - run: npm install mocha chai --save-dev
      - run: npm test
 Test-job3:
    runs-on: ubuntu-latest
    needs: Build-job 
    if: github.ref != 'refs/heads/production' 
    name: Test3
    steps:
      - uses: actions/checkout@v1
      - name: Test3
        uses: actions/setup-node@v1
        with:
          node-version: 14
      - run: npm install --global mocha
      - run: npm install unit.js
      - run: npm test 
 
 Deploy-job:
    runs-on: ubuntu-latest
    needs: [Test-job1,Test-job2,Test-job3]
    name: Deployment
    steps:
      - uses: actions/checkout@v1
      - name: Surge deployment
        uses: actions/setup-node@v1
        with:
          node-version: 14
      - run: npm install -g surge
      - run: surge ./ ${{secrets.SURGE_DOMAIN }} --token ${{ secrets.SURGE_TOKEN }}

 Postdeploy-Testing:
    runs-on: ubuntu-latest
    needs: Deploy-job
    name: Curl-Testing
    steps:
      - uses: actions/checkout@v1
      - name: Curl-testing
        uses: actions/setup-node@v1
        with:
          node-version: 14
      - run:  sudo apt install curl
      - run: curl -Is http://www.google.com | head -n 1
 
 Export-postman Data:
    runs-on: ubuntu-latest
    name: Postman Data
    steps:
      - uses: actions/checkout@master
      
      - uses: matt-ball/newman-action@master
        with:
         collection: github-actions.postman_collection.json
         environment: Github Actions.postman_environment.json
    
   
 
 sonartest:
    runs-on: ubuntu-latest
    needs: [Postdeploy-Testing]
    steps:
    - uses: actions/checkout@v2
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0
    - name: Download all workflow run artifacts
      uses: actions/download-artifact@v2    
    - name: SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        

 Notify-on-email:
    runs-on: ubuntu-latest
    if: always()
    needs: [Postdeploy-Testing,Build-job,Test-job1,Test-job2,Test-job3,Deploy-job]
    name: EmailNotify
    steps:    
      - name: Send mail
        uses: dawidd6/action-send-mail@v2
        with:
           server_address: smtp.gmail.com
           server_port: 465
           username: ${{secrets.MAIL_USERNAME}}
           password: ${{secrets.MAIL_PASSWORD}}
           subject: Github Actions job result
    # Literal body:
           body: Workflow status of ${{github.repository}} 1)Buildjob- ${{needs.Build-job.result}} 2)Test1- ${{needs.Test-job1.result}} 3)Test2- ${{needs.Test-job2.result}} 4)Test3- ${{needs.Test-job3.result}} 5)Deploy- ${{needs.Deploy-job.result}} 6)PostDeploy- ${{needs.Postdeploy-Testing.result}} 
           to: taman0753@gmail.com
           from: BlackJab

 Notify-on-slack:
    name: Slack Notification
    runs-on: ubuntu-latest
    if: always()
    needs: [Postdeploy-Testing,Build-job,Test-job1,Test-job2,Test-job3,Deploy-job]
    steps:
    - uses: actions/checkout@v2
    - name: Slack Notification
      uses: rtCamp/action-slack-notify@master
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_TITLE: Workflow status
        SLACK_USERNAME: BlackJab
        SLACK_MESSAGE: 1)Buildjob- ${{needs.Build-job.result}} 2)Test1- ${{needs.Test-job1.result}} 3)Test2- ${{needs.Test-job2.result}} 4)Test3- ${{needs.Test-job3.result}} 5)Deploy- ${{needs.Deploy-job.result}} 6)PostDeploy- ${{needs.Postdeploy-Testing.result}} 

 Jira-Issue-done:
    name: Transition Issue Done
    needs: [Postdeploy-Testing]

    runs-on: ubuntu-latest
    steps:
    - name: Login
      uses: atlassian/gajira-login@master
      env:
        JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
        JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
        JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
    
    - name: Transition issue
      id: transition
      uses: atlassian/gajira-transition@master
      with:
        issue: DFGA-3
        transition: "Done"
    - name: Comment on issue
      uses: atlassian/gajira-comment@master
      with:
       issue: DFGA-3
       comment: Pipeline Success
    

